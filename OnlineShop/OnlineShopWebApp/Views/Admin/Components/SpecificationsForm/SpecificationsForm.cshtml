@using OnlineShopWebApp.Interfaces
@model (Dictionary<string, string>, IProductSpecificationsRules)

@{
    var specifications = Model.Item1;
    var rules = Model.Item2.GetAll();
    var rulesGroups = rules
            .Select((rule, index) => new { rule, index })
            .GroupBy(x => x.index / 2);

    var tryGetValue = (string key) =>
        {
            var value = string.Empty;
            specifications?.TryGetValue(key, out value);

            return value;
        };
}

@foreach (var rulesGroup in rulesGroups)
{
    <div class="row d-flex justify-content-between gx-3 mb-3">

        @foreach (var ruleWithIndex in rulesGroup)
        {
            var rule = ruleWithIndex.rule;

            <div class="col-6">
                <label for="Specifications[@rule.Name]" class="form-label">@rule.Name</label>
                <input type="text" class="form-control input-field"
                       name="Specifications[@rule.Name]"
                       value="@tryGetValue(rule.Name)"
                       data-val="true"
                       data-val-required="Обязательное поле"
                       required
                       @if (!string.IsNullOrEmpty(rule.ValidationPattern))
                       {
                           <text>
                               data-val-regex="@(rule.ErrorMessage ?? $"Поле {rule.Name} имеет неверный формат.")"
                               data-val-regex-pattern="@rule.ValidationPattern"
                           </text>
                       }>

                <span class="validation-error-message field-validation-valid" data-valmsg-for="Specifications[@rule.Name]" data-valmsg-replace="true"></span>
            </div>
        }
    </div>
}